# This workflow automates the process of geocoding university data and creating a GitHub release.
# It can be triggered automatically on pushes to the main branch that modify critical data or workflow files,
# or it can be run manually. Supports both main.py (China) and main_global.py (Global) geocoding.

name: Geocode and Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
      - main
    paths:
      - "main.py"
      - "main_global.py"
      - "univ_moe.xls"
      - "univ_supp.json"
      - "merged_rankings.csv"
      - ".github/workflows/geocode.yml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      geocoding_mode:
        description: "Geocoding mode: 'china' (main.py) or 'global' (main_global.py)"
        required: true
        default: "global"
        type: choice
        options:
          - china
          - global
      iteration:
        description: "The iteration of the release tag, e.g., 'a', 'b'. Ignored for push triggers."
        required: true
        default: "a"

# Ensures that only one instance of this workflow runs at a time.
# If a new run is triggered while one is in progress, the older one will be canceled.
concurrency:
  group: geocode-and-release
  cancel-in-progress: true

jobs:
  # This job determines the correct release tag name.
  metadata:
    name: Determine Release Tag
    runs-on: ubuntu-latest
    outputs:
      # The calculated release tag will be available to other jobs.
      release-tag: ${{ steps.release-tag.outputs.RELEASE_TAG }}
    steps:
      # Checks out the repository so the workflow can access its content, including git history and tags.
      - name: Checkout repository to read existing tags
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags. This is crucial for accurately checking existing tags.
          fetch-depth: 0

      # This step contains the core logic for calculating the release tag.
      - name: Calculate release tag
        id: release-tag
        run: |
          # Get the base for the tag name, e.g., '24w28' for the 28th week of 2024.
          BASE_TAG=$(date +'%y')w$(date +'%V')

          # If the workflow was dispatched manually, use the provided iteration.
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ITERATION=${{ github.event.inputs.iteration }}
            FINAL_TAG="$BASE_TAG$ITERATION"
            echo "Manual trigger. Using specified tag: $FINAL_TAG"
            echo "RELEASE_TAG=$FINAL_TAG" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If triggered by a push, automatically determine the next available iteration.
          echo "Push trigger. Finding next available release iteration for $BASE_TAG..."

          # Loop through the alphabet from 'a' to 'z' to find the next available character.
          for char in {a..z}; do
            CANDIDATE_TAG="$BASE_TAG$char"
            # 'git tag -l' lists local tags. We fetched all of them in the checkout step.
            # We check if the candidate tag already exists (using exact match with ^ and $).
            if ! git tag -l | grep -q "^${CANDIDATE_TAG}$"; then
              echo "Next available tag is $CANDIDATE_TAG"
              echo "RELEASE_TAG=$CANDIDATE_TAG" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Tag $CANDIDATE_TAG already exists. Checking next..."
          done

          # If the loop completes, it means all iterations from 'a' to 'z' are used.
          echo "::error::All release iterations (a-z) for week $BASE_TAG have been used."
          exit 1

  # This job performs the geocoding and creates the GitHub release.
  geocode-and-release:
    name: Geocode and Release
    # This job will only start after the 'metadata' job has successfully completed.
    needs: metadata
    runs-on: ubuntu-latest
    permissions:
      # 'contents: write' is required to create a GitHub release.
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ">=3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare .env file
        run: |
          echo "TENCENT_MAP_KEY=${{ secrets.TENCENT_MAP_KEY }}" >> .env
          echo "TENCENT_MAP_SK=${{ secrets.TENCENT_MAP_SK }}" >> .env
          echo "GOOGLE_MAPS_KEY=${{ secrets.GOOGLE_MAPS_KEY }}" >> .env

      - name: Determine geocoding mode
        id: mode
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            MODE=${{ github.event.inputs.geocoding_mode }}
          else
            # For push events, check which file changed to determine mode
            if git diff --name-only HEAD~1 HEAD | grep -q "main_global.py\|merged_rankings.csv"; then
              MODE="global"
            else
              MODE="china"
            fi
          fi
          echo "GEOCODING_MODE=$MODE" >> $GITHUB_OUTPUT
          echo "Using geocoding mode: $MODE"

      - name: Run geocoding script (China)
        if: steps.mode.outputs.GEOCODING_MODE == 'china'
        run: python main.py

      - name: Run geocoding script (Global)
        if: steps.mode.outputs.GEOCODING_MODE == 'global'
        run: python main_global.py

      - name: Archive output files
        uses: actions/upload-artifact@v4
        with:
          name: geocoder-outputs
          path: |
            universities.json
            universities_global.json
            rejected_pois.csv
            rejected_pois_global.csv
            universities_with_no_campuses.csv
            universities_with_no_website.csv
            *.log

      # Creates the final release on GitHub using the tag generated by the 'metadata' job.
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.metadata.outputs.release-tag }}
          name: ${{ needs.metadata.outputs.release-tag }}
          body: |
            Automated geocoding run triggered by a critical push to the main branch or a manual dispatch.
            Mode: ${{ steps.mode.outputs.GEOCODING_MODE }}
            This release includes geocoded university data and logs from the run ${{ needs.metadata.outputs.release-tag }}.
          files: |
            universities.json
            universities_global.json
            rejected_pois.csv
            rejected_pois_global.csv
            universities_with_no_campuses.csv
            universities_with_no_website.csv
            *.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
